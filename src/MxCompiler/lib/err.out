extern puts
extern getchar
extern putchar
extern sprintf
extern __stack_chk_fail
extern malloc
extern printf
extern strlen
extern memcpy
extern scanf

global sqrDis
global add
global sub
global printPoint
global set
global dot
global cross
global main
global sqrLen
global point
SECTION .text

sqrDis:
	push	 rbp
	mov	 rbp, rsp
Enter_sqrDis:
	mov	 r15, rsp
	sub	 r15, 40
	mov	 rsp, r15
	mov	 r12, rdi
	mov	 qword [ rbp - 24 ], rsi
	mov	 r15, qword [ rbp - 24 ]
	mov	 rax, r15
	mov	 r11, qword [ rax ]
	mov	 r10, qword [ r12 ]
	mov	 r15, r11
	sub	 r15, r10
	mov	 r13, r15
	mov	 r15, qword [ rbp - 24 ]
	mov	 rax, r15
	mov	 r11, qword [ rax ]
	mov	 r10, qword [ r12 ]
	mov	 r15, r11
	sub	 r15, r10
	mov	 r10, r15
	mov	 r15, r13
	imul	 r15, r10
	mov	 r13, r15
	mov	 r15, qword [ rbp - 24 ]
	mov	 rax, r15
	mov	 r11, qword [ rax + 8 ]
	mov	 r10, qword [ r12 + 8 ]
	mov	 r15, r11
	sub	 r15, r10
	mov	 rbx, r15
	mov	 r15, rbx
	mov	 qword [ rbp - 32 ], r15
	mov	 r15, qword [ rbp - 24 ]
	mov	 rax, r15
	mov	 r10, qword [ rax + 8 ]
	mov	 r11, qword [ r12 + 8 ]
	mov	 r15, r10
	sub	 r15, r11
	mov	 r10, r15
	mov	 r15, qword [ rbp - 32 ]
	mov	 rax, r15
	mov	 r15, rax
	imul	 r15, r10
	mov	 r10, r15
	mov	 r15, r13
	add	 r15, r10
	mov	 r13, r15
	mov	 r15, qword [ rbp - 24 ]
	mov	 rax, r15
	mov	 r10, qword [ rax + 16 ]
	mov	 r11, qword [ r12 + 16 ]
	mov	 r15, r10
	sub	 r15, r11
	mov	 r10, r15
	mov	 r15, qword [ rbp - 24 ]
	mov	 rax, r15
	mov	 r11, qword [ rax + 16 ]
	mov	 r12, qword [ r12 + 16 ]
	mov	 r15, r11
	sub	 r15, r12
	mov	 r11, r15
	mov	 r15, r10
	imul	 r15, r11
	mov	 r10, r15
	mov	 r15, r13
	add	 r15, r10
	mov	 r10, r15
	mov	 r15, rsp
	add	 r15, 40
	mov	 rsp, r15
	pop	 rbp
	mov	 rax, r10
	ret


add:
	push	 rbp
	mov	 rbp, rsp
Enter_add:
	mov	 r15, rsp
	sub	 r15, 24
	mov	 rsp, r15
	mov	 r11, rdi
	mov	 r13, rsi
	mov	 r12, qword [ r13 ]
	mov	 r10, qword [ r11 ]
	mov	 r15, r12
	add	 r15, r10
	mov	 r10, r15
	mov	 qword [ r13 ], r10
	mov	 r10, qword [ r13 + 8 ]
	mov	 r12, qword [ r11 + 8 ]
	mov	 r15, r10
	add	 r15, r12
	mov	 r10, r15
	mov	 qword [ r13 + 8 ], r10
	mov	 r12, qword [ r13 + 16 ]
	mov	 r10, qword [ r11 + 16 ]
	mov	 r15, r12
	add	 r15, r10
	mov	 r10, r15
	mov	 qword [ r13 + 16 ], r10
	mov	 r15, rsp
	add	 r15, 24
	mov	 rsp, r15
	pop	 rbp
	mov	 rax, r13
	ret


sub:
	push	 rbp
	mov	 rbp, rsp
Enter_sub:
	mov	 r15, rsp
	sub	 r15, 24
	mov	 rsp, r15
	mov	 r11, rdi
	mov	 r12, rsi
	mov	 r13, qword [ r12 ]
	mov	 r10, qword [ r11 ]
	mov	 r15, r13
	sub	 r15, r10
	mov	 r10, r15
	mov	 qword [ r12 ], r10
	mov	 r10, qword [ r12 + 8 ]
	mov	 r13, qword [ r11 + 8 ]
	mov	 r15, r10
	sub	 r15, r13
	mov	 r10, r15
	mov	 qword [ r12 + 8 ], r10
	mov	 r13, qword [ r12 + 16 ]
	mov	 r10, qword [ r11 + 16 ]
	mov	 r15, r13
	sub	 r15, r10
	mov	 r10, r15
	mov	 qword [ r12 + 16 ], r10
	mov	 r15, rsp
	add	 r15, 24
	mov	 rsp, r15
	pop	 rbp
	mov	 rax, r12
	ret


printPoint:
	push	 rbp
	mov	 rbp, rsp
Enter_printPoint:
	mov	 r15, rsp
	sub	 r15, 16
	mov	 rsp, r15
	mov	 r12, rdi
	mov	 r10, qword [ r12 ]
	mov	 rdi, r10
	push	 r12
	call	 toString
	mov	 r10, rax
	pop	 r12
	mov	 rdi, str_0
	mov	 rsi, r10
	push	 r12
	call	 string.add
	mov	 r10, rax
	pop	 r12
	mov	 rdi, r10
	mov	 rsi, str_1
	push	 r12
	call	 string.add
	mov	 r11, rax
	pop	 r12
	mov	 r10, qword [ r12 + 8 ]
	mov	 rdi, r10
	push	 r11
	push	 r12
	call	 toString
	mov	 r10, rax
	pop	 r12
	pop	 r11
	mov	 rdi, r11
	mov	 rsi, r10
	push	 r12
	call	 string.add
	mov	 r10, rax
	pop	 r12
	mov	 rdi, r10
	mov	 rsi, str_2
	push	 r12
	call	 string.add
	mov	 r11, rax
	pop	 r12
	mov	 r10, qword [ r12 + 16 ]
	mov	 rdi, r10
	push	 r11
	call	 toString
	mov	 r10, rax
	pop	 r11
	mov	 rdi, r11
	mov	 rsi, r10
	call	 string.add
	mov	 r10, rax
	mov	 rdi, r10
	mov	 rsi, str_3
	call	 string.add
	mov	 r10, rax
	mov	 rdi, r10
	call	 println
	mov	 r15, rsp
	add	 r15, 16
	mov	 rsp, r15
	pop	 rbp
	ret


set:
	push	 rbp
	mov	 rbp, rsp
Enter_set:
	mov	 r15, rsp
	sub	 r15, 40
	mov	 rsp, r15
	mov	 r11, rdi
	mov	 r10, rsi
	mov	 r12, rdx
	mov	 r13, rcx
	mov	 qword [ r13 ], r11
	mov	 qword [ r13 + 8 ], r10
	mov	 qword [ r13 + 16 ], r12
	mov	 r15, rsp
	add	 r15, 40
	mov	 rsp, r15
	pop	 rbp
	ret


dot:
	push	 rbp
	mov	 rbp, rsp
Enter_dot:
	mov	 r15, rsp
	sub	 r15, 32
	mov	 rsp, r15
	mov	 r12, rdi
	mov	 qword [ rbp - 24 ], rsi
	mov	 r15, qword [ rbp - 24 ]
	mov	 rax, r15
	mov	 r10, qword [ rax ]
	mov	 r11, qword [ r12 ]
	mov	 r15, r10
	imul	 r15, r11
	mov	 r11, r15
	mov	 r15, qword [ rbp - 24 ]
	mov	 rax, r15
	mov	 r10, qword [ rax + 8 ]
	mov	 r13, qword [ r12 + 8 ]
	mov	 r15, r10
	imul	 r15, r13
	mov	 r10, r15
	mov	 r15, r11
	add	 r15, r10
	mov	 r11, r15
	mov	 r15, qword [ rbp - 24 ]
	mov	 rax, r15
	mov	 r10, qword [ rax + 16 ]
	mov	 r12, qword [ r12 + 16 ]
	mov	 r15, r10
	imul	 r15, r12
	mov	 r10, r15
	mov	 r15, r11
	add	 r15, r10
	mov	 r10, r15
	mov	 r15, rsp
	add	 r15, 32
	mov	 rsp, r15
	pop	 rbp
	mov	 rax, r10
	ret


cross:
	push	 rbp
	mov	 rbp, rsp
Enter_cross:
	mov	 r15, rsp
	sub	 r15, 64
	mov	 rsp, r15
	mov	 r12, rdi
	mov	 qword [ rbp - 32 ], rsi
	push	 r12
	mov	 rdi, 24
	call malloc
	mov	 r10, rax
	pop	 r12
	mov	 rdi, r10
	push	 r10
	push	 r12
	call	 point
	pop	 r12
	pop	 r10
	mov	 rbx, r10
	mov	 r15, rbx
	mov	 qword [ rbp - 24 ], r15
	mov	 r15, qword [ rbp - 32 ]
	mov	 rax, r15
	mov	 r11, qword [ rax + 8 ]
	mov	 r10, qword [ r12 + 16 ]
	mov	 r15, r11
	imul	 r15, r10
	mov	 r13, r15
	mov	 r15, qword [ rbp - 32 ]
	mov	 rax, r15
	mov	 r11, qword [ rax + 16 ]
	mov	 r10, qword [ r12 + 8 ]
	mov	 r15, r11
	imul	 r15, r10
	mov	 r10, r15
	mov	 r15, r13
	sub	 r15, r10
	mov	 r11, r15
	mov	 r15, qword [ rbp - 32 ]
	mov	 rax, r15
	mov	 r10, qword [ rax + 16 ]
	mov	 r13, qword [ r12 ]
	mov	 r15, r10
	imul	 r15, r13
	mov	 r13, r15
	mov	 r15, qword [ rbp - 32 ]
	mov	 rax, r15
	mov	 r10, qword [ rax ]
	mov	 rbx, qword [ r12 + 16 ]
	mov	 r15, rbx
	mov	 qword [ rbp - 48 ], r15
	mov	 r15, qword [ rbp - 48 ]
	mov	 rax, r15
	mov	 r15, r10
	imul	 r15, rax
	mov	 r10, r15
	mov	 r15, r13
	sub	 r15, r10
	mov	 rbx, r15
	mov	 r15, rbx
	mov	 qword [ rbp - 56 ], r15
	mov	 r15, qword [ rbp - 32 ]
	mov	 rax, r15
	mov	 r10, qword [ rax ]
	mov	 r13, qword [ r12 + 8 ]
	mov	 r15, r10
	imul	 r15, r13
	mov	 rbx, r15
	mov	 r15, rbx
	mov	 qword [ rbp - 40 ], r15
	mov	 r15, qword [ rbp - 32 ]
	mov	 rax, r15
	mov	 r13, qword [ rax + 8 ]
	mov	 r10, qword [ r12 ]
	mov	 r15, r13
	imul	 r15, r10
	mov	 r10, r15
	mov	 r15, qword [ rbp - 40 ]
	mov	 rax, r15
	mov	 r15, rax
	sub	 r15, r10
	mov	 r10, r15
	mov	 r15, qword [ rbp - 56 ]
	mov	 rax, r15
	mov	 r15, qword [ rbp - 24 ]
	mov	 rbx, r15
	mov	 rdi, r11
	mov	 rsi, rax
	mov	 rdx, r10
	mov	 rcx, rbx
	call	 set
	mov	 r10, rax
	mov	 r15, qword [ rbp - 24 ]
	mov	 rax, r15
	mov	 r15, rsp
	add	 r15, 64
	mov	 rsp, r15
	pop	 rbp
	mov	 rax, rax
	ret


main:
	push	 rbp
	mov	 rbp, rsp
Enter_main:
	mov	 r15, rsp
	sub	 r15, 32
	mov	 rsp, r15
	mov	 rdi, 24
	call malloc
	mov	 r10, rax
	mov	 rdi, r10
	push	 r10
	call	 point
	pop	 r10
	mov	 rbx, r10
	mov	 r15, rbx
	mov	 qword [ rbp - 16 ], r15
	mov	 rdi, 24
	call malloc
	mov	 r10, rax
	mov	 rdi, r10
	push	 r10
	call	 point
	pop	 r10
	mov	 rbx, r10
	mov	 r15, rbx
	mov	 qword [ rbp - 8 ], r15
	mov	 rdi, 24
	call malloc
	mov	 r10, rax
	mov	 rdi, r10
	push	 r10
	call	 point
	pop	 r10
	mov	 r13, r10
	push	 r13
	mov	 rdi, 24
	call malloc
	mov	 r10, rax
	pop	 r13
	mov	 rdi, r10
	push	 r10
	push	 r13
	call	 point
	pop	 r13
	pop	 r10
	mov	 r12, r10
	mov	 r15, qword [ rbp - 16 ]
	mov	 rax, r15
	mov	 rdi, rax
	push	 r12
	push	 r13
	call	 printPoint
	mov	 r10, rax
	pop	 r13
	pop	 r12
	mov	 r10, -463
	mov	 r15, qword [ rbp - 16 ]
	mov	 rax, r15
	mov	 rdi, 849
	mov	 rsi, r10
	mov	 rdx, 480
	mov	 rcx, rax
	push	 r12
	push	 r13
	call	 set
	mov	 r10, rax
	pop	 r13
	pop	 r12
	mov	 r10, -208
	mov	 r11, -150
	mov	 r15, qword [ rbp - 8 ]
	mov	 rax, r15
	mov	 rdi, r10
	mov	 rsi, 585
	mov	 rdx, r11
	mov	 rcx, rax
	push	 r12
	push	 r13
	call	 set
	mov	 r10, rax
	pop	 r13
	pop	 r12
	mov	 r11, -670
	mov	 r10, -742
	mov	 rdi, 360
	mov	 rsi, r11
	mov	 rdx, r10
	mov	 rcx, r13
	push	 r12
	push	 r13
	call	 set
	mov	 r10, rax
	pop	 r13
	pop	 r12
	mov	 r10, -29
	mov	 rbx, -591
	mov	 r15, rbx
	mov	 qword [ rbp - 24 ], r15
	mov	 r11, -960
	mov	 r15, qword [ rbp - 24 ]
	mov	 rax, r15
	mov	 rdi, r10
	mov	 rsi, rax
	mov	 rdx, r11
	mov	 rcx, r12
	push	 r12
	push	 r13
	call	 set
	mov	 r10, rax
	pop	 r13
	pop	 r12
	mov	 r15, qword [ rbp - 8 ]
	mov	 rax, r15
	mov	 r15, qword [ rbp - 16 ]
	mov	 rbx, r15
	mov	 rdi, rax
	mov	 rsi, rbx
	push	 r12
	push	 r13
	call	 add
	mov	 r10, rax
	pop	 r13
	pop	 r12
	mov	 r15, qword [ rbp - 8 ]
	mov	 rax, r15
	mov	 rdi, r13
	mov	 rsi, rax
	push	 r12
	push	 r13
	call	 add
	mov	 r10, rax
	pop	 r13
	pop	 r12
	mov	 rdi, r13
	mov	 rsi, r12
	push	 r12
	push	 r13
	call	 add
	mov	 r10, rax
	pop	 r13
	pop	 r12
	mov	 r15, qword [ rbp - 16 ]
	mov	 rax, r15
	mov	 rdi, rax
	mov	 rsi, r13
	push	 r12
	push	 r13
	call	 sub
	mov	 r10, rax
	pop	 r13
	pop	 r12
	mov	 r15, qword [ rbp - 8 ]
	mov	 rax, r15
	mov	 rdi, r12
	mov	 rsi, rax
	push	 r12
	push	 r13
	call	 sub
	mov	 r10, rax
	pop	 r13
	pop	 r12
	mov	 rdi, r13
	mov	 rsi, r12
	push	 r12
	push	 r13
	call	 sub
	mov	 r10, rax
	pop	 r13
	pop	 r12
	mov	 r15, qword [ rbp - 8 ]
	mov	 rax, r15
	mov	 rdi, rax
	mov	 rsi, r13
	push	 r12
	push	 r13
	call	 add
	mov	 r10, rax
	pop	 r13
	pop	 r12
	mov	 r15, qword [ rbp - 8 ]
	mov	 rax, r15
	mov	 r15, qword [ rbp - 16 ]
	mov	 rbx, r15
	mov	 rdi, rax
	mov	 rsi, rbx
	push	 r12
	push	 r13
	call	 add
	mov	 r10, rax
	pop	 r13
	pop	 r12
	mov	 r15, qword [ rbp - 8 ]
	mov	 rax, r15
	mov	 r15, qword [ rbp - 8 ]
	mov	 rbx, r15
	mov	 rdi, rbx
	mov	 rsi, rbx
	push	 r12
	push	 r13
	call	 add
	mov	 r10, rax
	pop	 r13
	pop	 r12
	mov	 rdi, r13
	mov	 rsi, r13
	push	 r12
	push	 r13
	call	 add
	mov	 r10, rax
	pop	 r13
	pop	 r12
	mov	 r15, qword [ rbp - 16 ]
	mov	 rax, r15
	mov	 rdi, r12
	mov	 rsi, rax
	push	 r12
	push	 r13
	call	 sub
	mov	 r10, rax
	pop	 r13
	pop	 r12
	mov	 r15, qword [ rbp - 8 ]
	mov	 rax, r15
	mov	 r15, qword [ rbp - 16 ]
	mov	 rbx, r15
	mov	 rdi, rax
	mov	 rsi, rbx
	push	 r12
	push	 r13
	call	 add
	mov	 r10, rax
	pop	 r13
	pop	 r12
	mov	 r15, qword [ rbp - 8 ]
	mov	 rax, r15
	mov	 rdi, r13
	mov	 rsi, rax
	push	 r12
	push	 r13
	call	 sub
	mov	 r10, rax
	pop	 r13
	pop	 r12
	mov	 r15, qword [ rbp - 16 ]
	mov	 rax, r15
	mov	 rdi, rax
	push	 r12
	push	 r13
	call	 sqrLen
	mov	 r10, rax
	pop	 r13
	pop	 r12
	mov	 rdi, r10
	push	 r12
	push	 r13
	call	 toString
	mov	 r10, rax
	pop	 r13
	pop	 r12
	mov	 rdi, r10
	push	 r12
	push	 r13
	call	 println
	pop	 r13
	pop	 r12
	mov	 r15, qword [ rbp - 8 ]
	mov	 rax, r15
	mov	 rdi, rax
	push	 r12
	push	 r13
	call	 sqrLen
	mov	 r10, rax
	pop	 r13
	pop	 r12
	mov	 rdi, r10
	push	 r12
	push	 r13
	call	 toString
	mov	 r10, rax
	pop	 r13
	pop	 r12
	mov	 rdi, r10
	push	 r12
	push	 r13
	call	 println
	pop	 r13
	pop	 r12
	mov	 r15, qword [ rbp - 8 ]
	mov	 rax, r15
	mov	 rdi, r13
	mov	 rsi, rax
	push	 r12
	push	 r13
	call	 sqrDis
	mov	 r10, rax
	pop	 r13
	pop	 r12
	mov	 rdi, r10
	push	 r12
	push	 r13
	call	 toString
	mov	 r10, rax
	pop	 r13
	pop	 r12
	mov	 rdi, r10
	push	 r12
	push	 r13
	call	 println
	pop	 r13
	pop	 r12
	mov	 r15, qword [ rbp - 16 ]
	mov	 rax, r15
	mov	 rdi, rax
	mov	 rsi, r12
	push	 r12
	push	 r13
	call	 sqrDis
	mov	 r10, rax
	pop	 r13
	pop	 r12
	mov	 rdi, r10
	push	 r12
	push	 r13
	call	 toString
	mov	 r10, rax
	pop	 r13
	pop	 r12
	mov	 rdi, r10
	push	 r12
	push	 r13
	call	 println
	pop	 r13
	pop	 r12
	mov	 r15, qword [ rbp - 16 ]
	mov	 rax, r15
	mov	 rdi, rax
	mov	 rsi, r13
	push	 r12
	push	 r13
	call	 dot
	mov	 r10, rax
	pop	 r13
	pop	 r12
	mov	 rdi, r10
	push	 r12
	push	 r13
	call	 toString
	mov	 r10, rax
	pop	 r13
	pop	 r12
	mov	 rdi, r10
	push	 r12
	push	 r13
	call	 println
	pop	 r13
	pop	 r12
	mov	 r15, qword [ rbp - 8 ]
	mov	 rax, r15
	mov	 rdi, r12
	mov	 rsi, rax
	push	 r12
	push	 r13
	call	 cross
	mov	 r10, rax
	pop	 r13
	pop	 r12
	mov	 rdi, r10
	push	 r12
	push	 r13
	call	 printPoint
	mov	 r10, rax
	pop	 r13
	pop	 r12
	mov	 r15, qword [ rbp - 16 ]
	mov	 rax, r15
	mov	 rdi, rax
	push	 r12
	push	 r13
	call	 printPoint
	mov	 r10, rax
	pop	 r13
	pop	 r12
	mov	 r15, qword [ rbp - 8 ]
	mov	 rax, r15
	mov	 rdi, rax
	push	 r12
	push	 r13
	call	 printPoint
	mov	 r10, rax
	pop	 r13
	pop	 r12
	mov	 rdi, r13
	push	 r12
	call	 printPoint
	mov	 r10, rax
	pop	 r12
	mov	 rdi, r12
	call	 printPoint
	mov	 r10, rax
	mov	 r15, rsp
	add	 r15, 32
	mov	 rsp, r15
	pop	 rbp
	mov	 rax, 0
	ret


sqrLen:
	push	 rbp
	mov	 rbp, rsp
Enter_sqrLen:
	mov	 r15, rsp
	sub	 r15, 16
	mov	 rsp, r15
	mov	 r12, rdi
	mov	 r10, qword [ r12 ]
	mov	 r11, qword [ r12 ]
	mov	 r15, r10
	imul	 r15, r11
	mov	 r13, r15
	mov	 r10, qword [ r12 + 8 ]
	mov	 r11, qword [ r12 + 8 ]
	mov	 r15, r10
	imul	 r15, r11
	mov	 r10, r15
	mov	 r15, r13
	add	 r15, r10
	mov	 r13, r15
	mov	 r11, qword [ r12 + 16 ]
	mov	 r10, qword [ r12 + 16 ]
	mov	 r15, r11
	imul	 r15, r10
	mov	 r10, r15
	mov	 r15, r13
	add	 r15, r10
	mov	 r10, r15
	mov	 r15, rsp
	add	 r15, 16
	mov	 rsp, r15
	pop	 rbp
	mov	 rax, r10
	ret


point:
	push	 rbp
	mov	 rbp, rsp
Enter_point:
	mov	 r15, rsp
	sub	 r15, 16
	mov	 rsp, r15
	mov	 r10, rdi
	mov	 qword [ r10 ], 0
	mov	 qword [ r10 + 8 ], 0
	mov	 qword [ r10 + 16 ], 0
	mov	 r15, rsp
	add	 r15, 16
	mov	 rsp, r15
	pop	 rbp
	ret


toString:

	push rbp

	mov rbp,rsp

	mov rdx,rdi

	mov rax,0

	mov rdi,stringbuffer

	mov rsi,format1

	call sprintf

	mov rdi,stringbuffer

	call transtring

	mov rsp,rbp

	pop rbp

	ret



println:

	call puts

	ret



array.size:

	mov	rax, qword [rdi]

	ret



string.add:

	push rbp

	mov rbp,rsp

	push rsi

	mov rsi,rdi

	mov rdi,stringbuffer

	mov rdx,[rsi-8]

	push rdx

	call memcpy

	pop rdi

	pop rsi

	add rdi,stringbuffer

	mov rdx,[rsi-8]

	add rdx,1

	call memcpy

	mov rdi,stringbuffer

	call transtring

	mov rsp,rbp

	pop rbp

	ret



getInt:

	push rbp

	mov rbp,rsp

	mov rax,0

	mov rdi,format1

	mov rsi,intbuffer

	call scanf

	mov rax,[intbuffer]

	mov rsp,rbp

	pop rbp

	ret



string.length:

	push    rbp

	mov     rbp, rsp

	mov     qword [rbp-18H], rdi

	mov     dword [rbp-4H], 0

	jmp     Llen_002

Llen_001:  add     dword [rbp-4H], 1

Llen_002:  mov     eax, dword [rbp-4H]

	movsxd  rdx, eax

	mov     rax, qword [rbp-18H]

	add     rax, rdx

	movzx   eax, byte [rax]

	test    al, al

	jnz     Llen_001

	mov     eax, dword [rbp-4H]

	pop     rbp

	ret



string.ord:

	push    rbp

	mov     rbp, rsp

	mov     qword [rbp-18H], rdi

	mov     dword [rbp-1CH], esi

	mov     eax, dword [rbp-1CH]

	movsxd  rdx, eax

	mov     rax, qword [rbp-18H]

	add     rax, rdx

	movzx   eax, byte [rax]

	movsx   eax, al

	mov     dword [rbp-4H], eax

	mov     eax, dword [rbp-4H]

	pop     rbp

	ret



print:

	push rbp

	mov rbp,rsp

	mov rax,0

	mov rsi,rdi

	mov rdi,format2

	call printf

	mov rsp,rbp

	pop rbp

	ret



transtring:



	push rbp

	mov rbp,rsp

	call strlen

	push rdi

	mov rdi,rax

	push rdi

	add rdi,9

	call malloc

	pop rdi

	mov [rax],rdi

	add rax,8

	mov rdx,rdi

	add rdx,1

	mov rdi,rax

	pop rsi

	sub rsp,8

	push rax

	call memcpy

	pop rax

	mov rsp,rbp

	pop rbp

	ret



getString:



	push rbp

	mov rbp,rsp

	mov rax,0

	mov rdi,format2

	mov rsi,stringbuffer

	call scanf

	mov rdi,stringbuffer

	call transtring

	mov rsp,rbp

	pop rbp

	ret



string.substring:

	push rbp

	mov rbp,rsp

	push rdi

	push rsi

	mov rdi,rdx

	sub rdi,rsi

	add rdi,1

	push rdi

	add rdi,9

	call malloc

	pop rdx

	mov [rax],rdx

	add rax,8

	pop rsi

	pop rdi

	add rsi,rdi

	mov rdi,rax

	push rdx

	push rax

	call memcpy

	pop rax

	pop rdx

	mov qword[rax+rdx],0

	mov rsp,rbp

	pop rbp

	ret



string.parseInt:

	push    rbp

	mov     rbp, rsp

	sub     rsp, 32

	mov     qword [rbp-18H], rdi

	mov     edi, 256

	call    malloc

	mov     qword [rbp-8H], rax

	mov     dword [rbp-10H], 0

	mov     dword [rbp-0CH], 0

	jmp     Lpar_002

Lpar_001:  add     dword [rbp-10H], 1

Lpar_002:  mov     eax, dword [rbp-10H]

	movsxd  rdx, eax

	mov     rax, qword [rbp-18H]

	add     rax, rdx

	movzx   eax, byte [rax]

	test    al, al

	jz      Lpar_004

	mov     eax, dword [rbp-10H]

	movsxd  rdx, eax

	mov     rax, qword [rbp-18H]

	add     rax, rdx

	movzx   eax, byte [rax]

	test    al, al

	js      Lpar_001

	mov     eax, dword [rbp-10H]

	movsxd  rdx, eax

	mov     rax, qword [rbp-18H]

	add     rax, rdx

	movzx   eax, byte [rax]

	cmp     al, 57

	jg      Lpar_001

	jmp     Lpar_004

Lpar_003:  mov     edx, dword [rbp-0CH]

	mov     eax, edx

	shl     eax, 2

	add     eax, edx

	add     eax, eax

	mov     ecx, eax

	mov     eax, dword [rbp-10H]

	movsxd  rdx, eax

	mov     rax, qword [rbp-18H]

	add     rax, rdx

	movzx   eax, byte [rax]

	movsx   eax, al

	add     eax, ecx

	sub     eax, 48

	mov     dword [rbp-0CH], eax

	add     dword [rbp-10H], 1

Lpar_004:  mov     eax, dword [rbp-10H]

	movsxd  rdx, eax

	mov     rax, qword [rbp-18H]

	add     rax, rdx

	movzx   eax, byte [rax]

	cmp     al, 47

	jle     Lpar_005

	mov     eax, dword [rbp-10H]

	movsxd  rdx, eax

	mov     rax, qword [rbp-18H]

	add     rax, rdx

	movzx   eax, byte [rax]

	cmp     al, 57

	jle     Lpar_003

Lpar_005:  mov     eax, dword [rbp-0CH]

	leave

	ret



string.eq:

	push    rbp

	mov     rbp, rsp

	mov     qword [rbp-18H], rdi

	mov     qword [rbp-20H], rsi

	mov     dword [rbp-0CH], 0

	mov     dword [rbp-8H], 0

	jmp     Leq_002

Leq_001:  add     dword [rbp-0CH], 1

Leq_002:  mov     eax, dword [rbp-0CH]

	movsxd  rdx, eax

	mov     rax, qword [rbp-18H]

	add     rax, rdx

	movzx   eax, byte [rax]

	test    al, al

	jz      Leq_004

	mov     eax, dword [rbp-0CH]

	movsxd  rdx, eax

	mov     rax, qword [rbp-18H]

	add     rax, rdx

	movzx   eax, byte [rax]

	test    al, al

	js      Leq_001

	mov     eax, dword [rbp-0CH]

	movsxd  rdx, eax

	mov     rax, qword [rbp-18H]

	add     rax, rdx

	movzx   eax, byte [rax]

	cmp     al, 57

	jg      Leq_001

	jmp     Leq_004

Leq_003:  add     dword [rbp-8H], 1

Leq_004:  mov     eax, dword [rbp-8H]

	movsxd  rdx, eax

	mov     rax, qword [rbp-20H]

	add     rax, rdx

	movzx   eax, byte [rax]

	test    al, al

	jz      Leq_005

	mov     eax, dword [rbp-8H]

	movsxd  rdx, eax

	mov     rax, qword [rbp-20H]

	add     rax, rdx

	movzx   eax, byte [rax]

	test    al, al

	js      Leq_003

	mov     eax, dword [rbp-8H]

	movsxd  rdx, eax

	mov     rax, qword [rbp-20H]

	add     rax, rdx

	movzx   eax, byte [rax]

	cmp     al, 57

	jg      Leq_003

Leq_005:  mov     eax, dword [rbp-0CH]

	cmp     eax, dword [rbp-8H]

	jz      Leq_006

	mov     eax, 0

	jmp     Leq_010

Leq_006:  mov     dword [rbp-4H], 0

	mov     dword [rbp-4H], 0

	jmp     Leq_009

Leq_007:  mov     eax, dword [rbp-4H]

	movsxd  rdx, eax

	mov     rax, qword [rbp-18H]

	add     rax, rdx

	movzx   edx, byte [rax]

	mov     eax, dword [rbp-4H]

	movsxd  rcx, eax

	mov     rax, qword [rbp-20H]

	add     rax, rcx

	movzx   eax, byte [rax]

	cmp     dl, al

	jz      Leq_008

	mov     eax, 0

	jmp     Leq_010

Leq_008:  add     dword [rbp-4H], 1

Leq_009:  mov     eax, dword [rbp-4H]

	cmp     eax, dword [rbp-0CH]

	jl      Leq_007

	mov     eax, 1

Leq_010:  pop     rbp

	ret



string.s:

	push    rbp

	mov     rbp, rsp

	mov     qword [rbp-18H], rdi

	mov     qword [rbp-20H], rsi

	mov     dword [rbp-10H], 0

	mov     dword [rbp-0CH], 0

	jmp     Ll_012

Ll_011:  add     dword [rbp-10H], 1

Ll_012:  mov     eax, dword [rbp-10H]

	movsxd  rdx, eax

	mov     rax, qword [rbp-18H]

	add     rax, rdx

	movzx   eax, byte [rax]

	test    al, al

	jz      Ll_014

	mov     eax, dword [rbp-10H]

	movsxd  rdx, eax

	mov     rax, qword [rbp-18H]

	add     rax, rdx

	movzx   eax, byte [rax]

	test    al, al

	js      Ll_011

	mov     eax, dword [rbp-10H]

	movsxd  rdx, eax

	mov     rax, qword [rbp-18H]

	add     rax, rdx

	movzx   eax, byte [rax]

	cmp     al, 57

	jg      Ll_011

	jmp     Ll_014

Ll_013:  add     dword [rbp-0CH], 1

Ll_014:  mov     eax, dword [rbp-0CH]

	movsxd  rdx, eax

	mov     rax, qword [rbp-20H]

	add     rax, rdx

	movzx   eax, byte [rax]

	test    al, al

	jz      Ll_015

	mov     eax, dword [rbp-0CH]

	movsxd  rdx, eax

	mov     rax, qword [rbp-20H]

	add     rax, rdx

	movzx   eax, byte [rax]

	test    al, al

	js      Ll_013

	mov     eax, dword [rbp-0CH]

	movsxd  rdx, eax

	mov     rax, qword [rbp-20H]

	add     rax, rdx

	movzx   eax, byte [rax]

	cmp     al, 57

	jg      Ll_013

Ll_015:  mov     eax, dword [rbp-0CH]

	cmp     dword [rbp-10H], eax

	cmovle  eax, dword [rbp-10H]

	mov     dword [rbp-4H], eax

	mov     dword [rbp-8H], 0

	mov     dword [rbp-8H], 0

	jmp     Ll_019

Ll_016:  mov     eax, dword [rbp-8H]

	movsxd  rdx, eax

	mov     rax, qword [rbp-18H]

	add     rax, rdx

	movzx   edx, byte [rax]

	mov     eax, dword [rbp-8H]

	movsxd  rcx, eax

	mov     rax, qword [rbp-20H]

	add     rax, rcx

	movzx   eax, byte [rax]

	cmp     dl, al

	jge     Ll_017

	mov     eax, 1

	jmp     Ll_021

Ll_017:  mov     eax, dword [rbp-8H]

	movsxd  rdx, eax

	mov     rax, qword [rbp-18H]

	add     rax, rdx

	movzx   edx, byte [rax]

	mov     eax, dword [rbp-8H]

	movsxd  rcx, eax

	mov     rax, qword [rbp-20H]

	add     rax, rcx

	movzx   eax, byte [rax]

	cmp     dl, al

	jle     Ll_018

	mov     eax, 0

	jmp     Ll_021

Ll_018:  add     dword [rbp-8H], 1

Ll_019:  mov     eax, dword [rbp-8H]

	cmp     eax, dword [rbp-4H]

	jl      Ll_016

	mov     eax, dword [rbp-10H]

	cmp     eax, dword [rbp-0CH]

	jl      Ll_020

	mov     eax, 0

	jmp     Ll_021

Ll_020:  mov     eax, 1

Ll_021:  pop     rbp

	ret



string.g:

	push    rbp

	mov     rbp, rsp

	mov     qword [rbp-18H], rdi

	mov     qword [rbp-20H], rsi

	mov     dword [rbp-10H], 0

	mov     dword [rbp-0CH], 0

	jmp     Lg_023

Lg_022:  add     dword [rbp-10H], 1

Lg_023:  mov     eax, dword [rbp-10H]

	movsxd  rdx, eax

	mov     rax, qword [rbp-18H]

	add     rax, rdx

	movzx   eax, byte [rax]

	test    al, al

	jz      Lg_025

	mov     eax, dword [rbp-10H]

	movsxd  rdx, eax

	mov     rax, qword [rbp-18H]

	add     rax, rdx

	movzx   eax, byte [rax]

	test    al, al

	js      Lg_022

	mov     eax, dword [rbp-10H]

	movsxd  rdx, eax

	mov     rax, qword [rbp-18H]

	add     rax, rdx

	movzx   eax, byte [rax]

	cmp     al, 57

	jg      Lg_022

	jmp     Lg_025

Lg_024:  add     dword [rbp-0CH], 1

Lg_025:  mov     eax, dword [rbp-0CH]

	movsxd  rdx, eax

	mov     rax, qword [rbp-20H]

	add     rax, rdx

	movzx   eax, byte [rax]

	test    al, al

	jz      Lg_026

	mov     eax, dword [rbp-0CH]

	movsxd  rdx, eax

	mov     rax, qword [rbp-20H]

	add     rax, rdx

	movzx   eax, byte [rax]

	test    al, al

	js      Lg_024

	mov     eax, dword [rbp-0CH]

	movsxd  rdx, eax

	mov     rax, qword [rbp-20H]

	add     rax, rdx

	movzx   eax, byte [rax]

	cmp     al, 57

	jg      Lg_024

Lg_026:  mov     eax, dword [rbp-0CH]

	cmp     dword [rbp-10H], eax

	cmovle  eax, dword [rbp-10H]

	mov     dword [rbp-4H], eax

	mov     dword [rbp-8H], 0

	mov     dword [rbp-8H], 0

	jmp     Lg_030

Lg_027:  mov     eax, dword [rbp-8H]

	movsxd  rdx, eax

	mov     rax, qword [rbp-18H]

	add     rax, rdx

	movzx   edx, byte [rax]

	mov     eax, dword [rbp-8H]

	movsxd  rcx, eax

	mov     rax, qword [rbp-20H]

	add     rax, rcx

	movzx   eax, byte [rax]

	cmp     dl, al

	jle     Lg_028

	mov     eax, 1

	jmp     Lg_032

Lg_028:  mov     eax, dword [rbp-8H]

	movsxd  rdx, eax

	mov     rax, qword [rbp-18H]

	add     rax, rdx

	movzx   edx, byte [rax]

	mov     eax, dword [rbp-8H]

	movsxd  rcx, eax

	mov     rax, qword [rbp-20H]

	add     rax, rcx

	movzx   eax, byte [rax]

	cmp     dl, al

	jge     Lg_029

	mov     eax, 0

	jmp     Lg_032

Lg_029:  add     dword [rbp-8H], 1

Lg_030:  mov     eax, dword [rbp-8H]

	cmp     eax, dword [rbp-4H]

	jl      Lg_027

	mov     eax, dword [rbp-10H]

	cmp     eax, dword [rbp-0CH]

	jg      Lg_031

	mov     eax, 0

	jmp     Lg_032

Lg_031:  mov     eax, 1

Lg_032:  pop     rbp

	ret



string.le:

	push    rbp

	mov     rbp, rsp

	mov     qword [rbp-18H], rdi

	mov     qword [rbp-20H], rsi

	mov     dword [rbp-10H], 0

	mov     dword [rbp-0CH], 0

	jmp     Llege_002

Llege_001:  add     dword [rbp-10H], 1

Llege_002:  mov     eax, dword [rbp-10H]

	movsxd  rdx, eax

	mov     rax, qword [rbp-18H]

	add     rax, rdx

	movzx   eax, byte [rax]

	test    al, al

	jz      Llege_004

	mov     eax, dword [rbp-10H]

	movsxd  rdx, eax

	mov     rax, qword [rbp-18H]

	add     rax, rdx

	movzx   eax, byte [rax]

	test    al, al

	js      Llege_001

	mov     eax, dword [rbp-10H]

	movsxd  rdx, eax

	mov     rax, qword [rbp-18H]

	add     rax, rdx

	movzx   eax, byte [rax]

	cmp     al, 57

	jg      Llege_001

	jmp     Llege_004

Llege_003:  add     dword [rbp-0CH], 1

Llege_004:  mov     eax, dword [rbp-0CH]

	movsxd  rdx, eax

	mov     rax, qword [rbp-20H]

	add     rax, rdx

	movzx   eax, byte [rax]

	test    al, al

	jz      Llege_005

	mov     eax, dword [rbp-0CH]

	movsxd  rdx, eax

	mov     rax, qword [rbp-20H]

	add     rax, rdx

	movzx   eax, byte [rax]

	test    al, al

	js      Llege_003

	mov     eax, dword [rbp-0CH]

	movsxd  rdx, eax

	mov     rax, qword [rbp-20H]

	add     rax, rdx

	movzx   eax, byte [rax]

	cmp     al, 57

	jg      Llege_003

Llege_005:  mov     eax, dword [rbp-0CH]

	cmp     dword [rbp-10H], eax

	cmovle  eax, dword [rbp-10H]

	mov     dword [rbp-4H], eax

	mov     dword [rbp-8H], 0

	mov     dword [rbp-8H], 0

	jmp     Llege_009

Llege_006:  mov     eax, dword [rbp-8H]

	movsxd  rdx, eax

	mov     rax, qword [rbp-18H]

	add     rax, rdx

	movzx   edx, byte [rax]

	mov     eax, dword [rbp-8H]

	movsxd  rcx, eax

	mov     rax, qword [rbp-20H]

	add     rax, rcx

	movzx   eax, byte [rax]

	cmp     dl, al

	jge     Llege_007

	mov     eax, 1

	jmp     Llege_011

Llege_007:  mov     eax, dword [rbp-8H]

	movsxd  rdx, eax

	mov     rax, qword [rbp-18H]

	add     rax, rdx

	movzx   edx, byte [rax]

	mov     eax, dword [rbp-8H]

	movsxd  rcx, eax

	mov     rax, qword [rbp-20H]

	add     rax, rcx

	movzx   eax, byte [rax]

	cmp     dl, al

	jle     Llege_008

	mov     eax, 0

	jmp     Llege_011

Llege_008:  add     dword [rbp-8H], 1

Llege_009:  mov     eax, dword [rbp-8H]

	cmp     eax, dword [rbp-4H]

	jl      Llege_006

	mov     eax, dword [rbp-10H]

	cmp     eax, dword [rbp-0CH]

	jle     Llege_010

	mov     eax, 0

	jmp     Llege_011

	Llege_010:  mov     eax, 1

	Llege_011:  pop     rbp

	ret



string.ge:

	push    rbp

	mov     rbp, rsp

	mov     qword [rbp-18H], rdi

	mov     qword [rbp-20H], rsi

	mov     dword [rbp-10H], 0

	mov     dword [rbp-0CH], 0

	jmp     Llege_013

Llege_012:  add     dword [rbp-10H], 1

Llege_013:  mov     eax, dword [rbp-10H]

	movsxd  rdx, eax

	mov     rax, qword [rbp-18H]

	add     rax, rdx

	movzx   eax, byte [rax]

	test    al, al

	jz      Llege_015

	mov     eax, dword [rbp-10H]

	movsxd  rdx, eax

	mov     rax, qword [rbp-18H]

	add     rax, rdx

	movzx   eax, byte [rax]

	test    al, al

	js      Llege_012

	mov     eax, dword [rbp-10H]

	movsxd  rdx, eax

	mov     rax, qword [rbp-18H]

	add     rax, rdx

	movzx   eax, byte [rax]

	cmp     al, 57

	jg      Llege_012

	jmp     Llege_015

Llege_014:  add     dword [rbp-0CH], 1

Llege_015:  mov     eax, dword [rbp-0CH]

	movsxd  rdx, eax

	mov     rax, qword [rbp-20H]

	add     rax, rdx

	movzx   eax, byte [rax]

	test    al, al

	jz      Llege_016

	mov     eax, dword [rbp-0CH]

	movsxd  rdx, eax

	mov     rax, qword [rbp-20H]

	add     rax, rdx

	movzx   eax, byte [rax]

	test    al, al

	js      Llege_014

	mov     eax, dword [rbp-0CH]

	movsxd  rdx, eax

	mov     rax, qword [rbp-20H]

	add     rax, rdx

	movzx   eax, byte [rax]

	cmp     al, 57

	jg      Llege_014

Llege_016:  mov     eax, dword [rbp-0CH]

	cmp     dword [rbp-10H], eax

	cmovle  eax, dword [rbp-10H]

	mov     dword [rbp-4H], eax

	mov     dword [rbp-8H], 0

	mov     dword [rbp-8H], 0

	jmp     Llege_020

Llege_017:  mov     eax, dword [rbp-8H]

	movsxd  rdx, eax

	mov     rax, qword [rbp-18H]

	add     rax, rdx

	movzx   edx, byte [rax]

	mov     eax, dword [rbp-8H]

	movsxd  rcx, eax

	mov     rax, qword [rbp-20H]

	add     rax, rcx

	movzx   eax, byte [rax]

	cmp     dl, al

	jle     Llege_018

	mov     eax, 1

	jmp     Llege_022

Llege_018:  mov     eax, dword [rbp-8H]

	movsxd  rdx, eax

	mov     rax, qword [rbp-18H]

	add     rax, rdx

	movzx   edx, byte [rax]

	mov     eax, dword [rbp-8H]

	movsxd  rcx, eax

	mov     rax, qword [rbp-20H]

	add     rax, rcx

	movzx   eax, byte [rax]

	cmp     dl, al

	jge     Llege_019

	mov     eax, 0

	jmp     Llege_022

Llege_019:  add     dword [rbp-8H], 1

Llege_020:  mov     eax, dword [rbp-8H]

	cmp     eax, dword [rbp-4H]

	jl      Llege_017

	mov     eax, dword [rbp-10H]

	cmp     eax, dword [rbp-0CH]

	jge     Llege_021

	mov     eax, 0

	jmp     Llege_022

Llege_021:  mov     eax, 1

Llege_022:  pop     rbp

	ret





SECTION .data	align=8

	dq	 1
str_0:
	db	   40,   0


	dq	 2
str_1:
	db	   44,  32,   0


	dq	 2
str_2:
	db	   44,  32,   0


	dq	 1
str_3:
	db	   41,   0

intbuffer:
	dq 0
format1:
	db"%lld",0
format2:
	db"%s",0


SECTION .bss
stringbuffer:
	resb 256

